#!/bin/bash
# Copyright (c) 2016 Daniel Gomez <d.gomez@donders.ru.nl>

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# FSLX is a *dumb* wrapper around some of fsltools.
# It exists so I don't have to remember the arbitrary names of fsl tools,
# nor the inconsistent parameter naming conventions of each of them.
# It also accepts multiple images as input to perform the same operations,
# so one can do something like:
# ls | xargs fslx nan
# And remove nans of all images in a particular directory, for example.
# TODO: Support for applyxfm, registration to MNI, concatenate transformation matrices.
# TODO: Read from STDIN?
# TODO: FAST segmentation
# TODO: Add support for dual_regression
# TODO: Add support for mixture modelling.

# Safety precautions
# Using a variable that is not set will raise an error
set -o nounset
# Exit if a command fails.
set -o errexit

# Uncomment to debug.
# set -x

function echo_help {
    echo "Fslx requires at least two arguments: an operation and one or more inputs:"
    echo "Compute (temporal) mean image: fslx tmean img1 img2"
    echo "Outputs img1_tmean and img2_tmean"
    echo ""
    echo "Currently supported operations: moco|mc tmean tstd tsnr abs recip bin nan sin exp rmskull"
    echo "Thresholding lowthresh and highthresh. Syntax: fslx lowthresh number img1 img2"
    echo "Filtering operations: smooth number,  highpass number,  lowpass number"
    echo "Query operations (not pipeable): nvols info header|hd cluster"
    echo "Temporal split and merge operations (not pipeable currently): split merge"
    echo "Linear registration:"
    echo "fslx align reference img1 img2"
    echo ""
    echo "False positive discovery rate correction: fslx fdr z_img1 z_img2"
    echo "Because it accepts multiple images, you can do cool stuff like for example:"
    echo "ls | xargs fslx moco | xargs fslx tsnr | xargs fslx nan > list_of_processed_files.txt"
    echo "And get the tsnr (nans converted to 0s ) for all your motion corrected files - and a list of them."
    echo ""
    echo "Oh, and before I forget:"
    echo "Viewer operations: view or v (pipes inputs through)"
    echo ""
    echo "That is the reason why I love nipype. Not."
    echo ""
    echo "Disclaimer: use at your own risk."
    echo ""
    echo "Written by Daniel Gomez"
}

if (($# < 1))
then
    echo_help
    exit 0
fi

if (($# < 2))
then
    echo "Maybe you forgot to use xargs or used fslx instead of xfslx in a pipe?"
    echo "In any case, I haven't received enough arguments to run. Please call me again =) Correctly."
    exit 0
fi

# Check if GNU readlink is available (for MacOS)
expandpath() {
    if hash greadlink 2>/dev/null; then
        greadlink "$@"
    else
        readlink "$@"
    fi
}

# Check whether fslview is deprecated
fslviewer() {
    if hash fslview 2> /dev/null; then
        fslview "$@"
    else
        fslview_deprecated "$@"
    fi
}


# The fsl cluster tool outputs a malformed txt file. This function fixes it.
correct_cluster_output() {
    sed --in-place --expression 's/Cluster Index/Cluster/g' $1
    sed --in-place --expression 's/MAX X (vox)/maxX/g' $1
    sed --in-place --expression 's/MAX Y (vox)/maxY/g' $1
    sed --in-place --expression 's/MAX Z (vox)/maxZ/g' $1
    sed --in-place --expression 's/COG X (vox)/cgX/g' $1
    sed --in-place --expression 's/COG Y (vox)/cgY/g' $1
    sed --in-place --expression 's/COG Z (vox)/cgZ/g' $1

}

# The operation to perform is ALWAYS the first argument to our wrapper.
operation=$1

# We define an array called inputs, which contains all files to process.
# We also define filenames, which are the inputs without file extensions.


# The second input may well be a number, in which case we have to check for it.
re='^[0-9]+([.][0-9]+)?$'
if [[ $2 =~ $re ]] ; then
    inputs[0]=`echo $2`
    filenames[0]=`echo $2`
    inputssansextension[0]=`echo $2`
else
    inputs[0]=`expandpath -f $2`
    currfile=${inputs[0]}

    if [ ! -f "$currfile" ]
    then
        echo "Your input to fslx, ${currfile} either doesn't exist, is not a file or is not readable."
        exit 1
    fi

    ## Split between directory and basename
    basedir=`expandpath -f $(dirname $currfile)`
    basefile=`basename $currfile`

    inputssansextension[0]="$basedir/${basefile%%.*}"
fi


# Start at 2 means: skip $0, $1 (the operation) and $2 (a possible number)
for (( i=3 ; i<=$# ; i++ )) ; do
    currfile=`echo ${!i}`
    currfile=`expandpath -f $currfile` # This adds support for relative input paths.

    if [ ! -f "$currfile" ]
    then
        echo "Your input to fslx, ${currfile} either doesn't exist, is not a file or is not readable."
        exit 1
    fi


    ## Split between directory and basename
    basedir=`expandpath -f $(dirname $currfile)`
    basefile=`basename $currfile`

    inputs[$i-2]=$basedir/$basefile
    inputssansextension[$i-2]="$basedir/${basefile%%.*}"
done

# echo "You choose operation $operation"
# echo "The operation will be applied in "
# echo ${inputssansextension[@]}

# I am aware that there is lots of code repetition and that I could easily refactor the following switch, so:
# TODO: Eliminate obscene amount of repetition.
INDEX_AT=0
for f in ${inputs[@]}
do
    # We need the name without extension to add a suffix according to the operation performed.
    namesansextension=${inputssansextension[$INDEX_AT]}

    case $operation in
        tmean|Tmean)
            # Compute the temporal mean of the image in time. Reduces a 4D to a 3D volume.
            outname=${namesansextension}_tmean.nii.gz
            fslmaths $f -Tmean $outname; echo $outname
            ;;
        simplemean)
            pythoncode=$(cat <<EOF
from __future__ import print_function, division
import sys
try:
    import nibabel as nib
except ImportError:
    print("FSLX simplemean requires python and the nibabel package to be installed.")
import numpy as np
vol = np.abs(nib.load("$f").get_data())
print('{} {:.2f}'.format("$f", np.nanmean(vol)))
EOF
)
            res="$(python -c "$pythoncode")"
            echo $res
            ;;
        simplestd)
            pythoncode=$(cat <<EOF
from __future__ import print_function, division
import sys
try:
    import nibabel as nib
except ImportError:
    print("FSLX simplemean requires python and the nibabel package to be installed.")
import numpy as np
vol = np.abs(nib.load("$f").get_data())
print('{} {:.2f}'.format("$f", np.nanstd(vol)))
EOF
                      )
            res="$(python -c "$pythoncode")"
            echo $res
            ;;
        tstd|Tstd)
            # Compute the standard deviation of the image in time. Reduces a 4D to a 3D volume.
            outname=${namesansextension}_tmean.nii.gz
            fslmaths $f -Tstd $outname; echo $outname
            ;;
        tsnr)
            # Compute the ratio of the mean and standard deviation of the image (in time). Reduces a 4D to a 3D volume.
            fslmaths $f -Tmean ${namesansextension}_mean_deleteme.nii.gz
            fslmaths $f -Tstd ${namesansextension}_std_deleteme.nii.gz
            fslmaths ${namesansextension}_mean_deleteme.nii.gz -div ${namesansextension}_std_deleteme.nii.gz ${namesansextension}_tsnr.nii.gz
            fslmaths ${namesansextension}_tsnr.nii.gz -nan ${namesansextension}_tsnr.nii.gz
            imrm ${namesansextension}_mean_deleteme.nii.gz ${namesansextension}_std_deleteme.nii.gz
            echo ${namesansextension}_tsnr.nii.gz
            ;;
        tsnr_tr|tsnrtr|trtsnr)
            # Compute the ratio of the mean and standard deviation of the image (in time). Reduces a 4D to a 3D volume.
            fslmaths $f -Tmean ${namesansextension}_mean_deleteme.nii.gz
            fslmaths $f -Tstd ${namesansextension}_std_deleteme.nii.gz
            fslmaths ${namesansextension}_mean_deleteme.nii.gz -div ${namesansextension}_std_deleteme.nii.gz ${namesansextension}_tsnrTR.nii.gz
            fslmaths ${namesansextension}_tsnrTR.nii.gz -nan ${namesansextension}_tsnrTR.nii.gz
            # Call fslx on original file to get the TR (in seconds) and compute it's square root.
            sqrt_tr=$(echo "sqrt ( `$0 tr $f` )" | bc -l)
            echo $sqrt_tr
            fslmaths ${namesansextension}_tsnrTR.nii.gz -div $sqrt_tr ${namesansextension}_tsnrTR.nii.gz
            imrm ${namesansextension}_mean_deleteme.nii.gz ${namesansextension}_std_deleteme.nii.gz
            echo ${namesansextension}_tsnrTR.nii.gz
            ;;
        mocome|mocomultiecho|memoco)
            # How many volumes?
            numvols=`fslnvols $f`
            # Moco the very first input and output the matrices
            mcflirt -in $f -mats -plots
            echo ${namesansextension}_mcf.nii.gz
            # This will generate a folder called
            matsfolder=${namesansextension}_mcf.mat
            # Now we need to loop over the remaining files, as usual.
            for (( j=1; j<${#inputs[@]}; j++ )) ; do
                fslsplit ${inputs[j]} ${inputssansextension[$j]}_mcf_deleteme -t
                # And loop over the split files, mocoing each of them
                for (( k=0; k<numvols; k++ )) ; do
                    mcflirt -in `echo $(printf "${inputssansextension[$j]}_mcf_deleteme%04d.nii.gz " $k)` -init `echo $(printf "${matsfolder}/MAT_%04d " $k)`
                done
                # Merge into meaninful mocoed file
                fslmerge -t ${inputssansextension[$j]}_mcf.nii.gz `echo $(ls ${inputssansextension[$j]}_mcf_deleteme*_mcf.nii.gz)`
                # Cleanup - no need to  worry about ls directory because inputssansextension contains the whole path.
                imrm `echo $(ls ${inputssansextension[$j]}_mcf_deleteme*.nii.gz)`
                # Pipe name of processed file down the line.
                echo ${inputssansextension[$j]}_mcf.nii.gz
            done
            # Final cleanup
            /usr/bin/rm -rf $matsfolder
            break;
            ;;
        echocombine|combineechoes|combinechoes|catechoes|catme|mecombine|mecat|combinemultiecho|combineme)
            # Merge all echoes by simple addition
            # Number of echoes =
            nechoes=${#inputs[@]}
            x=$f
            tmpname=${inputssansextension[0]}_tmp_deleteme.nii.gz
            outname=${inputssansextension[0]}_echoescombined.nii.gz
            for (( j=1; j<${#inputs[@]}; j++ )) ; do
                # Add an input and overwrite tmpname
                fslmaths $x -add ${inputs[$j]} $tmpname > /dev/null
                x=$tmpname
            done
            # Divide ny the total number of echoes
            fslmaths $tmpname -div $nechoes $tmpname
            immv $tmpname $outname
            echo $outname
            break # Break out of the loop, since we looped here.
            ;;
        exp)
            # Compute e**image, voxelwise.
            fslmaths $f -exp ${namesansextension}_exp.nii.gz
            echo ${namesansextension}_exp.nii.gz
            ;;
        lthresh|lthr|lowthresh)
            # Compute lower threshold
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_lthresh${f/./_}.nii.gz
                fslmaths ${inputs[$j]} -thr $f $outname > /dev/null
                echo $outname
            done
            break
            ;;
        uthresh|uthr|hthresh|hthr|highthresh)
            # Compute e**image, voxelwise.
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_uthresh${f/./_}.nii.gz
                fslmaths ${inputs[$j]} -uthr $f $outname > /dev/null
                echo $outname
            done
            break
            ;;
        mul|mult|multiply)
            # Multiply by integer
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_mulby_${f/./_}.nii.gz
                fslmaths ${inputs[$j]} -mul $f $outname > /dev/null
                echo $outname
            done
            break
            ;;
        sin)
            # Compute sin(image), voxelwise.
            fslmaths $f -sin ${namesansextension}_sin.nii.gz
            echo ${namesansextension}_sin.nii.gz
            ;;
        abs|mag|magn)
            # Compute the absolute value of an image, pixelwise.
            fslmaths $f -abs ${namesansextension}_abs.nii.gz
            echo ${namesansextension}_abs.nii.gz
            ;;
        min|minimum|tmin)
            # Compute the absolute value of an image, pixelwise.
            fslmaths $f -Tmin ${namesansextension}_min.nii.gz
            echo ${namesansextension}_min.nii.gz
            ;;
        bin)
            # Create a binary image from the input. Values > 0 are set to 1.
            fslmaths $f -bin ${namesansextension}_bin.nii.gz
            echo ${namesansextension}_bin.nii.gz
            ;;
        nan|nans)
            # Remove nans.
            fslmaths $f -nan ${namesansextension}_no_nans.nii.gz
            echo ${namesansextension}_no_nans.nii.gz
            ;;
        recip)
            # Compute 1/image, voxelwise.
            fslmaths $f -recip ${namesansextension}_recip.nii.gz
            echo ${namesansextension}_recip.nii.gz
            ;;
        percentile|nthpercentile)
            #  Get a brain extracted mask from a given threshold f.
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                fslstats -p $f ${inputs[$j]}
            done
            break
            ;;
        moco|mc)
            # Motion correction.
            mcflirt -in $f -out ${namesansextension}_mcf.nii.gz -plots
            echo ${namesansextension}_mcf.nii.gz
            ;;
        header|hd)
            # Read the header.
            fslhd $f
            ;;
        bet|brain|rmskull)
            # Remove the skull from (ideally) an anatomical image.
            meanfile=`$0 tmean $f`
            mask=`$0 betmask 0.3 $meanfile` # Be careful with 0.3.
            fslmaths  $f -mas $mask ${namesansextension}_noskull.nii.gz
            imrm $meanfile $mask
            echo ${namesansextension}_noskull.nii.gz
            ;;
        betmask|betm|betfracmask)
            #  Get a brain extracted mask from a given threshold f.
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_bet${f/./_}
                bet2 ${inputs[$j]} $outname -f $f -n -m
                echo ${outname}_mask.nii.gz
            done
            break
            ;;
        applymask|mask)
            #  Apply a mask on all inputs.
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_masked.nii.gz
                fslmaths ${inputs[$j]} -mas $f $outname > /dev/null
                echo $outname
            done
            break
            ;;
        mm|mixtuxemodel)
            # Untested
            # Syntax: fslx mm IC_map1 IC_map2 ...
            grotfile=$(mktemp)
            echo "1" > $grotfile
            tmpmmdir=$(mktemp -d)
            outname=${namesansextension}_MM.nii.gz
            melodic -i $f --ICs=$f --mix=$grotfile -o $tmpmmdir --Oall --mmthresh=0
            # Once melodic is done we can merge all output components into a single file
            fslmerge -t ${outname} $(find $tmpmmdir -name "thresh_zstat*" | sort -V)
            echo $outname
            break
            ;;
        inorm|intnorm)
            meanfile=`$0 tmean $f`
            mask=`$0 betmask 0.3 $meanfile`
            median=`fslstats $f -k $mask -p 50`
            imrm $meanfile $mask
            normfactor=$(python -c "from __future__ import division; print(10000.0/$median)")
            fslmaths $f -mul $normfactor ${namesansextension}_inorm.nii.gz
            echo ${namesansextension}_inorm.nii.gz
            ;;
        meinorm|meintnorm)
            if [ $INDEX_AT -eq 0 ]
            then # Find the first echo (be independent of input order) assuming it has the highest mean.
                maxscale=0
                firstecho=0
                for (( j=0 ; j<${#inputs[@]}; j++ )) ; do
                    tmpname=${inputssansextension[$j]}_tmp.nii.gz
                    fslroi ${inputs[$j]} $tmpname 0 1
                    themean=`fslstats $tmpname -m`
                    # Floating point comparison if mean > maxscale
                    if [ 1 -eq "$(echo "${themean} > ${maxscale}" | bc)" ]
                    then
                        maxscale=$themean
                        firstecho=$j
                    fi
                    imrm $tmpname
                done #first echo found.
                # Compute the scaling from this first echo
                meanfile=`$0 tmean ${inputs[$firstecho]}`
                mask=`$0 betmask 0.3 $meanfile`
                median=`fslstats ${inputs[$firstecho]} -k $mask -p 50`
                imrm $meanfile $mask
                normfactor=$(python -c "from __future__ import division; print(10000.0/$median)")
            fi # scaling factor computed.

            # Finally, apply the same scaling factor for all echoes.
            fslmaths $f -mul $normfactor ${namesansextension}_meinorm.nii.gz
            echo ${namesansextension}_meinorm.nii.gz

            ;;
        split|tsplit)
            # Split a 4d dataset into multiple 3d.
            fslsplit $f $f -t
            ;;
        merge)
            # Merge multiple 2d into a 3d, or multiple 3d into a 4d dataset.
            fslmerge -a ${inputssansextension[0]}_merged.nii.gz `echo ${inputssansextension[@]}`
            echo ${inputssansextension[0]}_merged.nii.gz
            break
            ;;
        tmerge|merget|concatt|tconcat)
            # Merge multiple 2d into a 3d, or multiple 3d into a 4d dataset.
            fslmerge -t ${inputssansextension[0]}_tmerged.nii.gz `echo ${inputssansextension[@]}`
            echo ${inputssansextension[0]}_tmerged.nii.gz
            break
            ;;
        zmerge|mergez|concatz|zconcat)
            # Merge multiple 2d into a 3d, or multiple 3d into a 4d dataset.
            fslmerge -z ${inputssansextension[0]}_upto_${inputssansextension[-1]}_zmerged.nii.gz `echo ${inputssansextension[@]}`
            echo ${inputssansextension[0]}_upto_${inputssansextension[-1]}_zmerged.nii.gz
            break
            ;;
        nvols)
            # Returns the number of volumes in a 4D image.
            fslnvols $f
            ;;
        info)
            # Short info read from the header (datatype and dimensions).
            fslinfo $f
            ;;
        align|register|reg|flirt)
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_reg.nii.gz
                flirt -in ${inputs[j]} -ref $f -out $outname > /dev/null
                echo $outname
            done
            break
            ;;
        alignepi|registerepi|reg2highres)
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_reg.nii.gz
                mcflirt -in ${inputs[j]} -r $f -out $outname > /dev/null
                echo $outname
            done
            break
            ;;
        changetype|chfiletype|chtype)
            fslchfiletype ANALYZE $f
            echo ${namesansextension}.img
            ;;
        bandpass|bandfilter|bfilter|bfilt)
            # Apply bandpass temporal filter
            ;;
        lowpass|lowfilter|lfilter|lfilt)
            #  Apply lowpass temporal filter.
            # Apply highpass temporal filter with cutoff from 2nd input.
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                tr=`fslinfo ${inputs[$j]} | /usr/bin/grep pixdim4 | sed 's/pixdim4        //'`
                cutoffinsec=$(python -c "from __future__ import division; print('%.2f' % ((1/$tr)*($f/2)))")
                outname=${inputssansextension[$j]}_lowpass${f/./_}.nii.gz
                tmpmean=`$0 tmean ${inputs[$j]}`
                fslmaths ${inputs[$j]} -bptf -1 $cutoffinsec -add $tmpmean $outname > /dev/null
                imrm $tmpmean
                echo $outname
            done
            break
            ;;
        highpass|highfilter|hfilter|hfilt|hpass)
            if [ $# -lt 3 ]; then
                echo "Missing argument. Syntax: fslx highpass PERIOD_IN_SECONDS file(s)"
                exit 0
            fi
            # Apply highpass temporal filter with cutoff from 2nd input.
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                tr=`fslinfo ${inputs[$j]} | /usr/bin/grep pixdim4 | sed 's/pixdim4        //'`
                cutoffinsec=$(python -c "from __future__ import division; print('%.2f' % ((1/$tr)*($f/2)))")
                outname=${inputssansextension[$j]}_highpass${f/./_}.nii.gz
                tmpmean=`$0 tmean ${inputs[$j]}`
                fslmaths ${inputs[$j]} -bptf $cutoffinsec -1 -add $tmpmean $outname > /dev/null
                imrm $tmpmean
                echo $outname
            done
            break
            ;;
        gauss)
            # Smooth with a Gaussian Kernel.
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_smooth${f/./_}.nii.gz
                fslmaths ${inputs[$j]} -s $f $outname > /dev/null
                echo $outname
            done
            break
            ;;
        susan|sue|smooth)
            if [ $# -lt 3 ]; then
                echo "Missing argument. Syntax: fslx susan KERNELSIZE_MM file(s)"
                exit 0
            fi

            # Smooth using FSL Susan, as done in FEAT.
            # Note that we don't use fslx pipeing facilities here to avoid intermediate files cleanly.
            fwhm=$(python -c"from __future__ import division; from math import sqrt, log; print($f/(2*sqrt(2*log(2))))")
            dims=3
            usemedian=1
            nusans=1
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_susan${f/./_}.nii.gz
                meanfunc=`$0 tmean ${inputs[$j]}`
                meanfuncbet=`$0 betfracmask 0.3 $meanfunc`
                maskedfunc=`$0 applymask $meanfuncbet $meanfunc`
                read percentile2 percentile98 <<< `fslstats $maskedfunc -p 2 -p 98`
                threshold=$(python -c "from __future__ import division; print(($percentile98 - $percentile2)/10.0)")
                premask1=`$0 lowthresh $threshold $maskedfunc`
                premask2=`$0 tmin $premask1`
                mask=`$0 bin $premask2`
                imrm $premask1 $premask2
                fslmaths $mask $mask -odt char # overwrites
                median=`fslstats ${inputs[$j]} -k $mask -p 50`
                fslmaths $mask -dilF $mask # overwrites
                thresholdedfunc=`$0 applymask $mask ${inputs[$j]}`
                meanthresholded=`$0 tmean $thresholdedfunc`
                bt=$(python -c "print($median*0.75)")
                susan $thresholdedfunc $bt $fwhm $dims $usemedian $nusans $meanthresholded $bt $outname
                fslmaths $outname -mas $mask $outname # overwrite
                imrm $meanfunc $meanfuncbet $maskedfunc $mask $thresholdedfunc $meanthresholded ${outname}_usan_size.nii.gz
                echo $outname
            done
            break
            ;;
        groupica)
            echo "Operation not implemented yet."
            break
            ;;
        melodic|ica|pica)
            melodic -i $f --report
            currdir=`dirname $f`; currfile=`basename $f`; currfile="${currfile%%.*}"
            icadir=${currdir}/${currfile}.ica
            outname=${namesansextension}_IC.nii.gz
            /usr/bin/cp ${icadir}/melodic_IC.nii.gz $outname
            /usr/bin/mv ${icadir} ${currdir}/${currfile}_ICAdir
            # mv ${icadir}/report ${currdir}/${currfile}_IC_reports
            # mv ${icadir}/mean.nii.gz ${icadir}/mask.nii.gz ${currdir}/${currfile}_IC_reports
            # rm -rf $icadir
            ;;
        # stats)
        #     # Stats
        #     fslstats $f
        #     ;;
        crosscorr|cc|crossc|crosscorrelation)
            ccfile=`basename $f`
            ccfile="${ccfile%%.*}"
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_cc_to_${ccfile}.txt
                echo "${ccfile} `basename ${inputs[$j]}` cc_value" > $outname
                fslcc --noabs -p 3 -t .204 $f ${inputs[$j]} | sort -r -nk3 >> $outname
                echo $outname
            done
            break
            ;;
        overlay_tfce)
            REF_MNI="$FSLDIR/data/standard/MNI152_T1_0.5mm.nii.gz"

            TEMP1=${namesansextension}_deleteme1.nii.gz
            TEMP2=${namesansextension}_deleteme2.nii.gz
            OUTNAMEPPM=${namesansextension}_overlay.ppm
            OUTNAMEPNG=${namesansextension}_overlay.png

            OUTNAMEPPM3=${namesansextension}_overlay_3orient.ppm
            OUTNAMEPNG3=${namesansextension}_overlay_3orient.png

            flirt -in $f -ref $REF_MNI -applyxfm -usesqform -out $TEMP1
            overlay 1 0 $REF_MNI -A $TEMP1 0.9975 1 $TEMP2
            slicer $TEMP2 -S 24 1200 $OUTNAMEPPM -a ${OUTNAMEPPM3}
            sleep 0.2
            convert ${OUTNAMEPPM} ${OUTNAMEPNG}
            convert ${OUTNAMEPPM3} ${OUTNAMEPNG3}

            imrm $TEMP1 $TEMP2
            rm $OUTNAMEPPM $OUTNAMEPPM3

            echo $OUTNAMEPNG
            echo $OUTNAMEPNG3
            ;;
        cluster)
            if [ $# -lt 3 ]; then
                echo "Missing argument. Syntax: fslx cluster THRESHOLD file(s)"
                exit 0
            fi

            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_clusterinfo.txt
                cluster --in=${inputs[$j]} --thresh=$f > $outname
                correct_cluster_output $outname
                echo $outname
            done
            break
            ;;
        melodicfdr|melodicfdrcorrection)
            outdir=`mktemp -d`
            currdir=`dirname "$f"`; currfile=`basename "$f"`; currfile="${currfile%%.*}"
            echo "1" > ${outdir}/fake.txt
            melodic -i "$f" --mix="${outdir}/fake.txt" --ICs=$f --Ostats --mmthresh=0.05d -o ${outdir}/${currfile} &> /dev/null
            outname=${namesansextension}_melodicfdr.nii.gz
            if [ -f "${outdir}/${currfile}/stats/thresh_zstat1.nii.gz" ]; then
                mv "${outdir}/${currfile}/stats/thresh_zstat1.nii.gz" $outname
                echo $outname
            fi
            ;;
        fdr)
            outname=${namesansextension}_fdrcorrected.nii.gz
            fdr -i $f -q 0.05 --othresh=$outname --oneminusp
            ;;
        fdrmask|fdrm|fdrwithmask)
            # Usage: fslx fdrmask MASK f1 f2 f3 ...
            for (( j=1 ; j<${#inputs[@]}; j++ )) ; do
                outname=${inputssansextension[$j]}_fdrmaskcorrected.nii.gz
                fdr -i ${inputs[$j]} --oneminusp -m $f -q 0.05 --othresh=$outname >/dev/null
                echo $outname
            done
            break
            ;;
        testinputs)
            echo ${inputs[@]}
            break
            ;;
        testinputssansextension)
            echo ${inputssansextension[@]}
            echo ${namesansextension}
            break
            ;;
        testscript)
            echo $0
            break
            ;;
        tr|TR)
            echo `fslinfo $f | /usr/bin/grep pixdim4 | /usr/bin/sed 's/pixdim4        //'`
            ;;
        v|view)
            fslviewer `echo ${inputs[@]}`
            echo ${inputs[@]}
            break
            ;;
        *)
            echo "Operation not implemented yet."
            break
            ;;
    esac

    ((INDEX_AT=INDEX_AT+1))

done

# In case I decide to write something else later..
INDEX_AT=

exit 0
